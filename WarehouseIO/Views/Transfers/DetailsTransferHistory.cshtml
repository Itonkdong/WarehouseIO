@using System.Activities.Statements
@using WarehouseIO.ControlClasses
@using WarehouseIO.CustomHtmlHelpers
@using WarehouseIO.Models
@model WarehouseIO.ViewModels.DetailsTransferHistoryViewModel

@{
    ViewBag.Title = "Details Transfer History";
}

<form class="type2-add-edit-view-page">
    <header>
        <h1>
            History Details For Transfer [ID: @Model.Transfer.Id, Status:
            @if (Model.Transfer.Status == TransferStatus.Accepted)
            {
                @Html.ToolTip("Accepted", "✅")
            }
            else if (Model.Transfer.Status == TransferStatus.Rejected)
            {
                @Html.ToolTip("Rejected", "❎")
            }
            else if (Model.Transfer.Status == TransferStatus.WarehouseDoesNotExistAnymore)
            {
                @Html.ToolTip(EnumHandler.GetDisplayName(Model.Transfer.Status), "\u26d4")
            }
            else
            {
                @Html.ToolTip("Still Pending", "\u231b")
            }
            ]
        </h1>
    </header>
    <section class="warehouse-double-info-box">
        <h5 class="warehouse-info-box-header">
            <span>
                From Warehouse
            </span>
            <span>
                To Warehouse
            </span>


        </h5>
        <div class="warehouse-double-info-box-wrapper">
            <div class="warehouse-info-box-items">
                <div class="warehouse-info-box-item">
                    <h5>
                        @Html.DisplayNameFor(m => m.FromWarehouse.Name):
                    </h5>
                    <div>@Html.DisplayTextFor(m => m.FromWarehouse.Name)</div>
                </div>

                <div class="warehouse-info-box-item">
                    <h5>
                        @Html.DisplayNameFor(m => m.FromWarehouse.Location):
                    </h5>
                    <div>@Html.DisplayTextFor(m => m.FromWarehouse.Location)</div>
                </div>
                <div class="warehouse-info-box-item">
                    <h5>
                        @Html.DisplayNameFor(m => m.FromWarehouse.CurrentCapacity):
                    </h5>
                    <div>@Html.DisplayTextFor(m => m.FromWarehouse.CurrentCapacity)/@Html.DisplayTextFor(m => m.FromWarehouse.MaxCapacity) Units @Html.ToolTip("1 Unite = 1 m3") </div>
                </div>
                <div class="warehouse-info-box-item">
                </div>
            </div>

            <div class="warehouse-info-box-items">

                <div class="warehouse-info-box-item">
                    <h5>
                        @Html.DisplayNameFor(m => m.ToWarehouse.Name):
                    </h5>
                    <div>@Html.DisplayTextFor(m => m.ToWarehouse.Name)</div>
                </div>

                <div class="warehouse-info-box-item">
                    <h5>
                        @Html.DisplayNameFor(m => m.ToWarehouse.Location):
                    </h5>
                    <div>@Html.DisplayTextFor(m => m.ToWarehouse.Location)</div>
                </div>
                <div class="warehouse-info-box-item">
                    <h5>
                        @Html.DisplayNameFor(m => m.ToWarehouse.CurrentCapacity):
                    </h5>
                    <div>@Html.DisplayTextFor(m => m.ToWarehouse.CurrentCapacity)/@Html.DisplayTextFor(m => m.ToWarehouse.MaxCapacity) Units @Html.ToolTip("1 Unite = 1 m3") </div>
                </div>
                <div class="warehouse-info-box-item">
                </div>
            </div>
        </div>

    </section>
    <section class="table-interact-section">
        @* <h5 class="table-interact-section-header">Transfer Includes Items:</h5> *@
        <div class="table-interact-section-header make-shipping-interact-section">
            <div class="make-shipping-interact-section-title">
                Transfer Includes Items:
            </div>
            <div class="make-shipping-interact-section-input">

                @Html.LabelFor(m => m.Transfer.MadeOn):

                @* @Html.DisplayTextFor(m => m.Transfer.MadeOn.ToString("d")) *@
                @Model.Transfer.MadeOn.ToString("d") @Html.ToolTip(Model.Transfer.MadeOn.ToString())

                &nbsp; &nbsp; | &nbsp; &nbsp;
                By :

                @Html.DisplayTextFor(m => m.Transfer.MadeByUser.Email)

                &nbsp; &nbsp; | &nbsp; &nbsp;
                @if (Model.Transfer.Status == TransferStatus.StillPending)
                {
                    @EnumHandler.GetDisplayName(Model.Transfer.Status)
                }
                else
                {
                    @Html.LabelFor(m => m.Transfer.ClosedOn)
                    <span>:</span>
                    @Html.ToolTip(Model.Transfer.MadeOn.ToString())
                    <spna>&nbsp;</spna>
                    @Model.Transfer.ClosedOn.Value.ToString("d")
                }

            </div>
        </div>
        <table class="entries-table" id="transfer-included-items">
            <thead>
                <tr>
                    <th>Image</th>
                    <th>Name</th>
                    <th>Size @Html.ToolTip("In cm3")</th>
                    <th>Type</th>
                    <th>Est. Price @Html.ToolTip("$ (In Dollars)")</th>
                    <th>Total Price</th>
                    <th>Space  @Html.ToolTip("Space " + (Model.Transfer.Status == TransferStatus.StillPending ? "Needed" : "Taken") +  " (In Units)")</th>
                    <th>Amount</th>
                </tr>
            </thead>
            <tbody>
                @foreach (MovingItem movingItem in Model.Transfer.TransferItems)
                {
                    <tr>
                        <td class="item-image">
                            <img src="@movingItem.Item.ImageUrlRender" alt="Item Image">
                        </td>
                        <td>@movingItem.Item.Name</td>
                        <td>@movingItem.Item.Size</td>
                        <td>@movingItem.Item.Type</td>
                        <td>@movingItem.EstPrice</td>

                        <td>@(movingItem.Amount * movingItem.EstPrice)</td>
                        <td>@movingItem.SpaceTaken</td>
                        <td>
                            <input type="number" class="transfer-amount-input entries-table-disabled-input" disabled value="@movingItem.Amount">
                        </td>
                    </tr>
                }

            </tbody>
        </table>
    </section>
    <footer>
        @Html.ErrorMessageSummary(Model.ErrorMessage)
    </footer>
    <div class="page-main-buttons ">
        @if (Model.Transfer.MadeByUser.Email == User.Identity.Name && Model.Transfer.Status == TransferStatus.StillPending)
        {
            @Html.ActionLink("Edit", "Edit", "Transfers", routeValues: new { transferId = Model.Transfer.Id }, htmlAttributes: new { @class = "btn-default page-main-button accent-background" })
            @Html.ActionLink("Delete", "Delete", "Transfers", routeValues: new { transferId = Model.Transfer.Id }, htmlAttributes: new { @class = "btn-default page-main-button primary-background", id= "js-transfer-delete-button" })


        }
        @Html.ActionLink("Manage Transfers", "Index", "Transfers", routeValues: null, htmlAttributes: new { @class = "btn-default page-main-button shade3-background" })
        @Html.ActionLink("To Dashboard", "Dashboard", "Home", routeValues: new {warehouseId = Model.FromWarehouse.Id}, htmlAttributes: new { @class = "btn-default page-main-button shade2-background" })

    </div>
</form>

@section scripts
{
    <script>
        $(document).ready(function() {
            $('#transfer-included-items').DataTable({
                paging: true,
                searching: true,
                ordering: true,
                pageLength: 3,
                lengthChange: false,
                autoWidth: false,
                responsive: true,
                order: [[1, 'asc']],
            });
        });

        async function deleteEntity(itemId, controller) {
            const url = `/api/${controller}/${itemId}`;

            let response;
            try {
                response = await fetch(url,
                    {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

            } catch (e) {
                return e;
            }


            if (!response.ok) {
                return false;
            }

            return true;
        }


        const deleteButton = document.querySelector("#js-transfer-delete-button");

        deleteButton.addEventListener("click",
            (e) => {

                e.preventDefault();
                Swal.fire({
                    title: "Are you sure you want to delete this transfer?",
                    text: `You won't be able to revert this!`,
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Yes, delete it!",
                }).then(async (result) => {
                    if (result.isConfirmed) {
                        const id = @Model.Transfer.Id;
                        const result = await deleteEntity(id, "Transfers");
                        console.log(result);

                        if (result === true) {
                            Swal.fire({
                                title: "Deleted!",
                                text: "The transfer has been deleted.",
                                icon: "success"
                            });

                            setTimeout(() => {
                                    window.location.href = '@Url.Action("Index", "Transfers")';
                                },
                                1500);
                        } else {
                            Swal.fire({
                                title: "Error Occured!",
                                text: `Error: ${result}`,
                                icon: "error"
                            });
                        }


                    }
                });
            });

    </script>
}