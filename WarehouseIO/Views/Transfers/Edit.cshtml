@using WarehouseIO.CustomHtmlHelpers
@using WarehouseIO.Models
@using WarehouseIO.ViewModels

@model WarehouseIO.ViewModels.MakeEditTransferViewModel

@{
    ViewBag.Title = "Edit Pending Transfer";
}

@using (Html.BeginForm("Edit", "Transfers", FormMethod.Post, htmlAttributes: new { @class = "type2-add-edit-view-page", id = "pending-transfer-form" }))
{
    <header>
        <h1>Edit Pending Transfer - ID: @Model.Transfer.Id</h1>
    </header>
    <section class="warehouse-double-info-box">
        <h5 class="warehouse-info-box-header">
            <span>
                From Warehouse
            </span>
            <span>
                <label for="to-warehouse-name">
                    To Warehouse
                </label>
                @Html.DropDownListFor(m => m.ToWarehouseId, new SelectList(Model.AllWarehouses.Where(w => w.Id != Model.FromWarehouseId), "Id", "Name"), htmlAttributes: new { id = "to-warehouse-name" })

            </span>
        </h5>
        <div class="warehouse-double-info-box-wrapper">
            <div class="warehouse-info-box-items">
                <div class="warehouse-info-box-item">
                    <h5>
                        @Html.DisplayNameFor(m => m.FromWarehouse.Name):
                    </h5>
                    <div>@Html.DisplayTextFor(m => m.FromWarehouse.Name)</div>
                </div>

                <div class="warehouse-info-box-item">
                    <h5>
                        @Html.DisplayNameFor(m => m.FromWarehouse.Location):
                    </h5>
                    <div>@Html.DisplayTextFor(m => m.FromWarehouse.Location)</div>
                </div>
                <div class="warehouse-info-box-item">
                    <h5>
                        @Html.DisplayNameFor(m => m.FromWarehouse.CurrentCapacity):
                    </h5>
                    <div>@Html.DisplayTextFor(m => m.FromWarehouse.CurrentCapacity)/@Html.DisplayTextFor(m => m.FromWarehouse.MaxCapacity) Units @Html.ToolTip("1 Unite = 1 cm3") </div>
                </div>
                <div class="warehouse-info-box-item">
                    @Html.ActionLink("Manage Warehouse", "Index", "Warehouses", routeValues: new { warehouseId = Model.FromWarehouse.Id }, htmlAttributes: new { @class = "btn-default btn-small" })

                </div>
            </div>
            <div class="warehouse-info-box-items">

                <div class="warehouse-info-box-item">
                    <h5>
                        @Html.DisplayNameFor(m => m.ToWarehouse.Name):
                    </h5>
                    <div>@Html.DisplayTextFor(m => m.ToWarehouse.Name)</div>
                </div>

                <div class="warehouse-info-box-item">
                    <h5>
                        @Html.DisplayNameFor(m => m.ToWarehouse.Location):
                    </h5>
                    <div>@Html.DisplayTextFor(m => m.ToWarehouse.Location)</div>
                </div>
                <div class="warehouse-info-box-item">
                    <h5>
                        @Html.DisplayNameFor(m => m.ToWarehouse.CurrentCapacity):
                    </h5>
                    <div>@Html.DisplayTextFor(m => m.ToWarehouse.CurrentCapacity)/@Html.DisplayTextFor(m => m.ToWarehouse.MaxCapacity) Units @Html.ToolTip("1 Unit = 1 m3") </div>
                </div>
                <div class="warehouse-info-box-item">
                    @Html.ActionLink("Manage Warehouse", "Index", "Warehouses", routeValues: new { warehouseId = Model.ToWarehouse.Id }, htmlAttributes: new { @class = "btn-default btn-small" })
                </div>
            </div>
        </div>

    </section>
    <section class="table-interact-section">
        <h5 class="table-interact-section-header">Transfer Includes Items:</h5>
        <table class="entries-table">
            <thead>
            <tr>
                <th>Include All</th>
                <th>Image</th>
                <th>Name</th>
                <th>Size @Html.ToolTip("In cm3")</th>
                <th>Type</th>
                <th>Available Amount</th>
                <th>Transfer Amount</th>
            </tr>
            </thead>
            <tbody>

            @for (var i = 0; i < Model.AllFromWarehouseItems.Count; i++)
            {
                MovingItem item = Model.GetAppropriateMovingItem(Model.AllFromWarehouseItems[i]);
                if (item != null)
                {

                    Model.AllFromWarehouseItems[i].TransferAmount = item.Amount;
                }

                <tr>
                    <td>
                        @Html.CheckBoxFor(m => m.AllFromWarehouseItems[i].IncludeAll, htmlAttributes: new { @class = "include-checkbox" })
                    </td>
                    <td class="item-image">
                        <img src="@Model.AllFromWarehouseItems[i].ImageUrlRender" alt="Item Image">
                    </td>
                    <td>@Html.DisplayTextFor(m => m.AllFromWarehouseItems[i].Name)</td>
                    <td>@Html.DisplayTextFor(m => m.AllFromWarehouseItems[i].Size)</td>
                    <td>@Html.DisplayTextFor(m => m.AllFromWarehouseItems[i].Type)</td>
                    <td>@Html.DisplayTextFor(m => m.AllFromWarehouseItems[i].AvailableAmount)</td>
                    <td>
                        @Html.TextBoxFor(m => m.AllFromWarehouseItems[i].TransferAmount, htmlAttributes: new { @class = "transfer-amount-input" })
                    </td>
                </tr>
                @Html.HiddenFor(model => model.AllFromWarehouseItems[i].Id)
                @Html.HiddenFor(model => model.AllFromWarehouseItems[i].Name)
                @Html.HiddenFor(model => model.AllFromWarehouseItems[i].Size)
                @Html.HiddenFor(model => model.AllFromWarehouseItems[i].Type)
                @Html.HiddenFor(model => model.AllFromWarehouseItems[i].AvailableAmount)
                @Html.HiddenFor(model => model.AllFromWarehouseItems[i].EstPrice)
            }
            @Html.HiddenFor(model => model.Transfer.Id)
            @Html.HiddenFor(model=>model.LastChangedToWarehouseId)
            </tbody>
        </table>
    </section>
    <footer>
        @Html.ErrorMessageSummary(Model.ErrorMessage)
    </footer>
    <div class="page-main-buttons">
        <button class="btn-default page-main-button">Save</button>
        @Html.ActionLink("Delete", "Delete", "Transfers", routeValues: new { transferId = Model.Transfer.Id }, htmlAttributes: new { @class = "btn-default page-main-button", id= "js-transfer-delete-button" })
        @Html.ActionLink("Manage Transfers", "Index", "Transfers", routeValues: null, htmlAttributes: new { @class = "btn-default page-main-button shade3-background" })
        @Html.ActionLink("To Dashboard", "Dashboard", "Home", routeValues: null, htmlAttributes: new { @class = "btn-default page-main-button shade2-background" })
    </div>
}

@section scripts
{
    <script>
        const form = document.getElementById("pending-transfer-form");

        function handleSelectListChange(toWarehouseList) {
            form.submit();
        }

        const toWarehouseList = document.getElementById('to-warehouse-name');

        toWarehouseList.addEventListener('change',
            () => {
                handleSelectListChange(toWarehouseList);
            });

        console.log(form);
        console.log(toWarehouseList);


        async function deleteEntity(itemId, controller) {
            const url = `/api/${controller}/${itemId}`;

            let response;
            try {
                response = await fetch(url,
                    {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

            } catch (e) {
                return e;
            }


            if (!response.ok) {
                return false;
            }

            return true;
        }


        const deleteButton = document.querySelector("#js-transfer-delete-button");

        deleteButton.addEventListener("click",
            (e) => {

                e.preventDefault();
                Swal.fire({
                    title: "Are you sure you want to delete this transfer?",
                    text: `You won't be able to revert this!`,
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Yes, delete it!",
                }).then(async (result) => {
                    if (result.isConfirmed) {
                        const id = @Model.Transfer.Id;
                        const result = await deleteEntity(id, "Transfers");
                        console.log(result);

                        if (result === true) {
                            Swal.fire({
                                title: "Deleted!",
                                text: "The transfer has been deleted.",
                                icon: "success"
                            });

                            setTimeout(() => {
                                    window.location.href = '@Url.Action("Index", "Transfers")';
                                },
                                1500);
                        } else {
                            Swal.fire({
                                title: "Error Occured!",
                                text: `Error: ${result}`,
                                icon: "error"
                            });
                        }


                    }
                });
            });


    </script>
}