@using WarehouseIO.CustomHtmlHelpers
@using WarehouseIO.Models
@model WarehouseIO.ViewModels.ManageShipmentsViewModel
@{
    ViewBag.Title = "Manage Shipments";
    string tempError = (string)TempData["ErrorMessage"];
}

<form class="type2-add-edit-view-page">
    <header>
        <h1>Manage Shipments</h1>
    </header>
    <section class="warehouse-info-box">
        <h5 class="warehouse-info-box-header">
            <label for="warehouse-name">
                From
            </label>
            @Html.DropDownListFor(m => m.WarehouseId, new SelectList(Model.AllWarehouses, "Id", "Name"), htmlAttributes: new { id = "warehouse-name" })

        </h5>
        <div class="warehouse-info-box-items ">
            <div class="warehouse-info-box-item">
                <h5>
                    @Html.DisplayNameFor(m => m.Warehouse.Name):
                </h5>
                <div>@Html.DisplayTextFor(m => m.Warehouse.Name)</div>
            </div>
            <div class="warehouse-info-box-item">
                <h5>
                    @Html.DisplayNameFor(m => m.Warehouse.Description):
                </h5>
                <div>@Html.DisplayTextFor(m => m.Warehouse.Description)</div>
            </div>
            <div class="warehouse-info-box-item">
                <h5>
                    @Html.DisplayNameFor(m => m.Warehouse.Location):
                </h5>
                <div>@Html.DisplayTextFor(m => m.Warehouse.Location)</div>
            </div>
            <div class="warehouse-info-box-item">
                <h5>
                    @Html.DisplayNameFor(m => m.Warehouse.CurrentCapacity):
                </h5>
                <div>@Html.DisplayTextFor(m => m.Warehouse.CurrentCapacity)/@Html.DisplayTextFor(m => m.Warehouse.MaxCapacity) Units @Html.ToolTip("1 Unit = 1 m3") </div>
            </div>
            <div class="warehouse-info-box-item">
                @Html.ActionLink("Manage Warehouse", "Index", "Warehouses", routeValues: new { warehouseId = Model.Warehouse.Id }, htmlAttributes: new { @class = "btn-default btn-small" })
            </div>
        </div>

    </section>
    <section class="table-interact-section">
        <h5 class="table-interact-section-header">Shipments</h5>
        <table class="entries-table" id="shipments-table">
            <thead>
            <tr>
                <th class="colapse-column">Shipping ID</th>
                <th>Shipping To</th>
                <th>Made On</th>
                <th>Status / Finalized On</th>
                <th>Options</th>
            </tr>
            </thead>
            <tbody>
            @if (Model.Shipments.Count == 0)
            {
                <tr>
                    <td>No shipments from warehouse: @Model.Warehouse.Name</td>
                </tr>
            }
            else
            {
                foreach (Shipment shipment in Model.Shipments)
                {
                    <tr>
                        <td class="colapse-column">@shipment.Id</td>
                        <td>@shipment.ShippingTo</td>
                        <td>@shipment.MadeOn</td>
                        @if (shipment.Status == ShipmentStatus.Preparing)
                        {
                            <td>@shipment.Status</td>
                        }
                        else
                        {
                            <td>@shipment.FinalizedOn @Html.ToolTip(shipment.ShipmentStatusString, "\u2705")</td>

                        }
                    <td class="entries-table-options">

                        @if (shipment.Status == ShipmentStatus.Preparing)
                        {
                            @Html.ActionLink("Finalize", "Finalize", "Shipments", routeValues: new { shipmentId = shipment.Id }, htmlAttributes: new { @class = "btn-default btn-small" })

                            @Html.ActionLink("Cancel", "Cancel", "Shipments", routeValues: new { shipmentId = shipment.Id }, htmlAttributes: new { @class = "btn-default btn-small secondary-background js-single-shipment-delete-button", data_id = shipment.Id })

                        }
                        @Html.ActionLink("Details", "Details", "Shipments", routeValues: new { shipmentId = shipment.Id }, htmlAttributes: new { @class = "btn-default btn-small shade2-background" })


                    </td>
                    </tr>
                }
            }


            </tbody>
        </table>
    </section>
    <footer>
        @Html.ErrorMessageSummary(Model.ErrorMessage, tempError)
    </footer>
    <div class="page-main-buttons ">
        @* <button class="btn-default page-main-button">Delete All</button> *@
        @Html.ActionLink("Finalize All", "FinalizeAll", "Shipments", routeValues: new { warehouseId = Model.WarehouseId }, htmlAttributes: new { @class = "btn-default page-main-button ", id= "finalize-all-button" })
        @Html.ActionLink("Cancel All", "CancelAll", "Shipments", routeValues: new { warehouseId = Model.WarehouseId }, htmlAttributes: new { @class = "btn-default page-main-button secondary-background ", id= "cancel-all-button" })
        @Html.ActionLink("Make Shipment", "Make", "Shipments", routeValues: new { warehouseId = Model.WarehouseId }, htmlAttributes: new { @class = "btn-default page-main-button shade3-background" })

        @Html.ActionLink("To Dashboard", "Dashboard", "Home", routeValues: new {warehouseId = Model.WarehouseId}, htmlAttributes: new { @class = "btn-default page-main-button shade2-background" })

    </div>
</form>

@section scripts
{

    <script>

        const warehousesList = document.getElementById('warehouse-name');

        warehousesList.addEventListener('change',
            () => {
                const url = '@Url.Action("Index", "Shipments")' + '?warehouseId=' + warehousesList.value;
                window.location.href = url;
            });


        $(document).ready(function () {
            $('#shipments-table').DataTable({
                paging: true,    // Enable pagination
                searching: true, // Enable search bar
                ordering: true,  // Enable column-based sorting
                pageLength: 3,   // Number of entries per page
                lengthChange: false, // Disable user changing page length
                autoWidth: false,    // Disable auto width adjustment
                responsive: true,    // Enable responsiveness
                order: [[2, 'dsc']], // Default ordering (by the second column "Name")
            });
        });


        async function deleteEntity(itemId, controller) {
            const url = `/api/${controller}/${itemId}`;

            let response;
            try {
                response = await fetch(url,
                    {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

            } catch (e) {
                return e;
            }


            if (!response.ok) {
                return false;
            }

            return true;
        }




        const deleteButtons = document.querySelectorAll(".js-single-shipment-delete-button");

        deleteButtons.forEach(b => {
            b.addEventListener("click",
                (e) => {

                    e.preventDefault();
                    Swal.fire({
                        title: "Are you sure you want to cancel this shipment?",
                        text: `You won't be able to revert this!`,
                        icon: "warning",
                        showCancelButton: true,
                        confirmButtonColor: "#3085d6",
                        cancelButtonColor: "#d33",
                        confirmButtonText: "Yes, cancel it!",
                    }).then(async (result) => {
                        if (result.isConfirmed) {
                            const id = b.dataset["id"];
                            const result = await deleteEntity(id, "Shipments");
                            console.log(result);

                            if (result === true) {

                                Swal.fire({
                                    title: "Canceled!",
                                    text: "The shipment has been canceled.",
                                    icon: "success"
                                });

                                setTimeout(() => {
                                    location.reload();
                                },
                                    1500);
                            } else {
                                Swal.fire({
                                    title: "Error Occured!",
                                    text: `Error: ${result}`,
                                    icon: "error"
                                });
                            }


                        }
                    });
                });

        });

        const finalizeAllButton = document.querySelector("#finalize-all-button");

        finalizeAllButton.addEventListener("click",
            (e) => {

                e.preventDefault();
                Swal.fire({
                    title: "Are you sure you want to finalize all shipments?",
                    text: `You won't be able to revert this!`,
                    icon: "question",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Yes, finalize them!",
                }).then(async (result) => {
                    if (result.isConfirmed) {

                        // Continue with the default behavior if you want
                        window.location.href = e.target.href;


                    }
                });
            });

        const cancelAllButton = document.querySelector("#cancel-all-button");

        cancelAllButton.addEventListener("click",
            (e) => {

                e.preventDefault();
                Swal.fire({
                    title: "Are you sure you want to cancel all shipments?",
                    text: `You won't be able to revert this!`,
                    icon: "question",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Yes, cancel them!",
                }).then(async (result) => {
                    if (result.isConfirmed) {

                        // Continue with the default behavior if you want
                        window.location.href = e.target.href;


                    }
                });
            });

    </script>
}