@using WarehouseIO.ControlClasses
@using WarehouseIO.CustomHtmlHelpers
@using WarehouseIO.Models
@model WarehouseIO.ViewModels.ManageWarehouseViewModel
@{
    ViewBag.Title = "Manage Warehouses";
}


@using (@Html.BeginForm("Index", "Warehouses", FormMethod.Get, htmlAttributes: new { @class = "type2-add-edit-view-page" }))
{
    <header>
        <h1>Manage Warehouses</h1>
    </header>
    <section class="warehouse-info-box">
        <h5 class="warehouse-info-box-header">
            <label for="warehouse-name">
                Warehouse:
            </label>
            @Html.DropDownListFor(m => m.WarehouseId, new SelectList(Model.AllWarehouses, "Id", "Name"), htmlAttributes: new { onchange = "this.form.submit();" })
            <span></span>
            @Html.ActionLink("Add Warehouse", "Add", "Warehouses", routeValues: null, htmlAttributes: new { @class = "btn-default btn-small background-color" })

        </h5>
        <div class="warehouse-info-box-items ">
            <div class="warehouse-info-box-item">
                <h5>
                    @Html.DisplayNameFor(m => m.Warehouse.Name):
                </h5>
                <div>@Html.DisplayTextFor(m => m.Warehouse.Name)</div>
            </div>
            <div class="warehouse-info-box-item">
                <h5>
                    @Html.DisplayNameFor(m => m.Warehouse.Description):
                </h5>
                <div>@Html.DisplayTextFor(m => m.Warehouse.Description)</div>
            </div>
            <div class="warehouse-info-box-item">
                <h5>
                    @Html.DisplayNameFor(m => m.Warehouse.Location):
                </h5>
                <div>@Html.DisplayTextFor(m => m.Warehouse.Location)</div>
            </div>
            <div class="warehouse-info-box-item">
                <h5>
                    @Html.DisplayNameFor(m => m.Warehouse.CurrentCapacity):
                </h5>
                <div>@Html.DisplayTextFor(m => m.Warehouse.CurrentCapacity)/@Html.DisplayTextFor(m => m.Warehouse.MaxCapacity) Units @Html.ToolTip("1 Unit = 1 m3") </div>
            </div>
            <div class="warehouse-info-box-item">
                @if (Model.IsUserManagerInWarehouse(User.Identity.Name))
                {
                    @Html.ActionLink("Delete Warehouse", "Add", "Warehouses", routeValues: null, htmlAttributes: new { @class = "btn-default btn-small secondary-background", id = "warehouse-delete-button" })
                    @Html.ActionLink("Edit Warehouse Details", "Edit", "Warehouses", routeValues: new { warehouseId = Model.Warehouse.Id }, htmlAttributes: new { @class = "btn-default btn-small" })
                }

            </div>

        </div>

    </section>
    <section class="table-interact-section">
        <h5 class="table-interact-section-header">Warehouse Stored Items</h5>
        <table class="entries-table" id="warehouses-table">
            <thead>
            <tr>
                <th class="colapse-column">Image</th>
                <th>Name</th>
                <th>Description</th>
                <th>Type</th>
                <th>Size @Html.ToolTip("In cm3")</th>
                <th>Est. Price @Html.ToolTip("In $ (Dollars)")</th>
                <th>Amount</th>
                <th>Options</th>
            </tr>
            </thead>
            <tbody>

            @if (Model.Warehouse.StoredItems.Count == 0)
            {
                <tr>
                    <td>The warehouse does not have any stored items</td>
                </tr>
            }
            else
            {
                foreach (Item item in Model.Warehouse.StoredItems)
                {
                    <tr>
                        <td class="item-image colapse-column">
                            @if (!string.IsNullOrEmpty(item.ImageUrl))
                            {
                                <img src="@item.ImageUrl" alt="Item Image">
                            }
                            else
                            {
                                <img src="~/Content/Images/default-item-picture.png" alt="Item Image">
                            }
                        </td>
                        <td>@item.Name</td>
                        <td>@item.Description</td>
                        <td>@EnumHandler.GetDisplayName(item.Type)</td>

                        <td>@item.Size</td>
                        <td>@item.EstPrice</td>
                        <td>@item.Amount</td>
                        <td class="entries-table-options">
                            @Html.ActionLink("Edit", "Edit", "Item", routeValues: new { warehouseId = Model.Warehouse.Id, itemId = item.Id }, htmlAttributes: new { @class = "btn-default btn-small" })
                            @if (Model.IsUserManagerInWarehouse(User.Identity.Name))
                            {
                                @Html.ActionLink("Remove", "Remove", "Item", routeValues: new { itemId = item.Id, warehouseId = Model.Warehouse.Id }, htmlAttributes: new { @class = "btn-default btn-small secondary-background js-item-delete-button", data_id = item.Id })
                            }
                        </td>
                    </tr>
                }
            }

            </tbody>
        </table>
    </section>
    @* <footer> *@
    @*     <p class="page-error-message">Error Message: Fill all the inputs</p> *@
    @* </footer> *@
    <div class="page-main-buttons">
        @Html.ActionLink("Add Item", "Add", "Item", routeValues: new { warehouseId = Model.Warehouse.Id }, htmlAttributes: new { @class = "btn-default page-main-button", id = "test-button-1" })
        @Html.ActionLink("Make Transfer", "Make", "Transfers", routeValues: new { fromWarehouseId = Model.WarehouseId }, htmlAttributes: new { @class = "btn-default page-main-button primary-background text-inverted-color" })

        @Html.ActionLink("Make Shipment", "Make", "Shipments", routeValues: new { warehouseId = Model.Warehouse.Id }, htmlAttributes: new { @class = "btn-default page-main-button primary-background text-inverted-color" })
        @Html.ActionLink("Manage Operators", "Index", "Operators", routeValues: new { warehouseId = Model.WarehouseId }, htmlAttributes: new { @class = "btn-default page-main-button shade3-background" })
        @Html.ActionLinkButton("To Dashboard", "Dashboard", "Home", routeValues: new { warehouseId = Model.WarehouseId }, classList: "shade2-background")

    </div>
}

@section scripts
{

    <script type="text/javascript">


        async function deleteEntity(itemId, controller)
        {
            const url = `/api/${controller}/${itemId}`;

            let response;
            try {
                response = await fetch(url,
                    {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

            } catch (e) {
                return e;
            }


            if (!response.ok) {
                return false;
            }

            return true;
        }

        $(document).ready(function() {
            $('#warehouses-table').DataTable({
                paging: true, // Enable pagination
                searching: true, // Enable search bar
                ordering: true, // Enable column-based sorting
                pageLength: 4, // Number of entries per page
                lengthChange: false, // Disable user changing page length
                autoWidth: false, // Disable auto width adjustment
                responsive: true, // Enable responsiveness
                order: [[1, 'asc']], // Default ordering (by the second column "Name")
            });
        });

        const warehouseDeleteButton = document.getElementById("warehouse-delete-button");

        warehouseDeleteButton.addEventListener("click",
            (e) => {

                e.preventDefault();
                Swal.fire({
                    title: "Are you sure you want to delete this warehouse?",
                    text: `You won't be able to revert this! 
                    All Transfers from this warehouse will be deleted!`,
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Yes, delete it!",
                }).then(async (result) => {
                    if (result.isConfirmed) {

                        const result = await deleteEntity(@Model.WarehouseId, "Warehouses");
                        console.log(result);

                        if (result === true) {
                            Swal.fire({
                                title: "Deleted!",
                                text: "Your warehouse has been deleted.",
                                icon: "success"
                            });
                        } else {
                            Swal.fire({
                                title: "Error Occured!",
                                text: `Error: ${result}`,
                                icon: "error"
                            });
                        }


                    }
                });
            });


        const itemDeleteButtons = document.querySelectorAll(".js-item-delete-button");

        console.log(itemDeleteButtons);
        itemDeleteButtons.forEach(b => {
            b.addEventListener("click",
                (e) => {

                    e.preventDefault();
                    Swal.fire({
                        title: "Are you sure you want to remove this item?",
                        text: `You won't be able to revert this!`,
                        icon: "warning",
                        showCancelButton: true,
                        confirmButtonColor: "#3085d6",
                        cancelButtonColor: "#d33",
                        confirmButtonText: "Yes, delete it!",
                    }).then(async (result) => {
                        if (result.isConfirmed) {
                            const id = b.dataset["id"];
                            const result = await deleteEntity(id, "Items");
                            console.log(result);

                            if (result === true) {
                                Swal.fire({
                                    title: "Deleted!",
                                    text: "The item has been deleted.",
                                    icon: "success"
                                });

                                setTimeout(() => {
                                        location.reload();
                                    },
                                    1500);
                            } else {
                                Swal.fire({
                                    title: "Error Occured!",
                                    text: `Error: ${result}`,
                                    icon: "error"
                                });
                            }


                        }
                    });
                });

        });

        

    </script>
}