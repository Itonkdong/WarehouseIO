@using WarehouseIO.ControlClasses
@using WarehouseIO.CustomHtmlHelpers
@using WarehouseIO.Models
@using WarehouseIO.ViewModels
@model WarehouseIO.ViewModels.AddEditItemViewModel

@{
    ViewBag.Title = "Edit Item";
    string errorMessage = ErrorHandler.MissingInputsErrorMessage<AddEditItemViewModel>(ViewData, AddEditItemViewModel.GetPropertiesNames());
    string tempError = (string)TempData["ErrorMessage"];
}


@using (Html.BeginForm("Edit", "Item", FormMethod.Post, htmlAttributes: new { @class = "type2-add-edit-view-page" }))
{
    <header>
        <h1>Edit Item</h1>
    </header>
    <section class="warehouse-info-box">
        <h4 class="warehouse-info-box-header">Warehouse Info</h4>
        <div class="warehouse-info-box-items">
            <div class="warehouse-info-box-item">
                <h5>
                    @Html.DisplayNameFor(m => m.Warehouse.Name):
                </h5>
                <div>@Html.DisplayTextFor(m => m.Warehouse.Name)</div>
                @Html.HiddenFor(m => m.WarehouseId)
            </div>
            <div class="warehouse-info-box-item">
                <h5>
                    @Html.DisplayNameFor(m => m.Warehouse.Description):
                </h5>
                <div>@Html.DisplayTextFor(m => m.Warehouse.Description)</div>
            </div>
            <div class="warehouse-info-box-item">
                <h5>
                    @Html.DisplayNameFor(m => m.Warehouse.Location):
                </h5>
                <div>@Html.DisplayTextFor(m => m.Warehouse.Location)</div>
            </div>
            <div class="warehouse-info-box-item">
                <h5>
                    @Html.DisplayNameFor(m => m.Warehouse.CurrentCapacity):
                </h5>
                <div>@Html.DisplayTextFor(m => m.Warehouse.CurrentCapacity)/@Html.DisplayTextFor(m => m.Warehouse.MaxCapacity) Units</div>
            </div>
            <div class="warehouse-info-box-item">
                @Html.ActionLink("Manage Warehouse", "Index", "Warehouses", new { warehouseId = Model.WarehouseId }, new { @class = "btn-default btn-small" })
            </div>
        </div>
    </section>
    <section class="form-interact-section">
        <h5>Item Info</h5>
        <div class="add-item-items">
            <div class="add-item-item">
                @Html.LabelFor(m => m.Name, htmlAttributes: new { @class = "" })
                @Html.TextBoxFor(m => m.Name, htmlAttributes: new { @class = "" })
            </div>
            <div class="add-item-item">
                @Html.LabelFor(m => m.Description, htmlAttributes: new { @class = "" })
                @Html.TextBoxFor(m => m.Description, htmlAttributes: new { @class = "" })
            </div>
            <div class="add-item-item">
                @Html.LabelFor(m => m.Type, htmlAttributes: new { @class = "" })
                @Html.DropDownListFor(m => m.Type, EnumHandler.GetSelectList<ItemType>(Model.AllItemTypes.ToList()), htmlAttributes: new { })


            </div>
            <div class="add-item-item">
                @Html.LabelFor(m => m.ImageUrl, htmlAttributes: new { @class = "" })
                @Html.TextBoxFor(m => m.ImageUrl, htmlAttributes: new { @class = "" })
            </div>
            <div class="add-item-item">
                @Html.LabelFor(m => m.EstPrice, htmlAttributes: new { @class = "" })
                @Html.TextBoxFor(m => m.EstPrice, htmlAttributes: new { @class = "" })
            </div>
            <div class="add-item-item">
                @Html.LabelFor(m => m.Size, htmlAttributes: new { @class = "custom-tooltip", data_title = "In cm3" })
                @Html.TextBoxFor(m => m.Size, htmlAttributes: new { @class = "" })
            </div>
            <div class="add-item-item">
                @Html.LabelFor(m => m.Amount, htmlAttributes: new { @class = "" })
                @Html.TextBoxFor(m => m.Amount, htmlAttributes: new { @class = "" })
            </div>
            @Html.HiddenFor(m => m.Id, htmlAttributes: new { @class = "" })

        </div>
    </section>
    <footer>
        @Html.ErrorMessageSummary(Model.ErrorMessage, errorMessage, tempError)
    </footer>
    <div class="page-main-buttons">
        <button class="btn-default page-main-button">Save</button>
        @Html.ActionLink("Remove", "Remove", "Item", routeValues: new { itemId = Model.Id }, htmlAttributes: new { @class = "btn-default page-main-button shade4-background", id = "js-item-delete-button" })

        @Html.ActionLink("To Dashboard", "Dashboard", "Home", routeValues: new { warehouseId = Model.WarehouseId }, htmlAttributes: new { @class = "btn-default page-main-button shade2-background" })
    </div>
}

@section scripts
{

    <script type="text/javascript">


        async function deleteEntity(itemId, controller) {
            const url = `/api/${controller}/${itemId}`;

            let response;
            try {
                response = await fetch(url,
                    {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

            } catch (e) {
                return e;
            }


            if (!response.ok) {
                return false;
            }

            return true;
        }


        const deleteButton = document.querySelector("#js-item-delete-button");

        deleteButton.addEventListener("click",
            (e) => {

                e.preventDefault();
                Swal.fire({
                    title: "Are you sure you want to remove this item?",
                    text: `You won't be able to revert this!`,
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Yes, delete it!",
                }).then(async (result) => {
                    if (result.isConfirmed) {
                        const id = @Model.Id;
                        const result = await deleteEntity(id, "Items");
                        console.log(result);

                        if (result === true) {
                            Swal.fire({
                                title: "Deleted!",
                                text: "The item has been deleted.",
                                icon: "success"
                            });

                            setTimeout(() => {
                                    window.location.href = '@Url.Action("Index", "Warehouses")' + '?warehouseId=' + @Model.WarehouseId;
                                },
                                1500);
                        } else {
                            Swal.fire({
                                title: "Error Occured!",
                                text: `Error: ${result}`,
                                icon: "error"
                            });
                        }


                    }
                });
            });


    </script>

}