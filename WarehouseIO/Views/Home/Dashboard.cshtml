@using System.Activities.Statements
@using WarehouseIO.ControlClasses
@using WarehouseIO.CustomHtmlHelpers
@using WarehouseIO.Models
@model WarehouseIO.ViewModels.DashboardViewModel

@{
    ViewBag.Title = "Dashboard";
    string tempError = (string)TempData["ErrorMessage"];
    List<Transfer> transfers = Model.Warehouse.TransfersFromWarehouse.ToList();
}

<div class="dashboard-page">
    <header>
        <div>
            <h1>Analytics For</h1>
            <label for="warehouse-dashboard-selector">
                @*
                    <select id="warehouse-dashboard-selector">
                        <option>WH-1-Main</option>
                        <option>WH-2-Main</option>
                    </select>
                *@
                @Html.DropDownListFor(m => m.WarehouseId, new SelectList(Model.AllWarehouses, "Id", "Name"), htmlAttributes: new { id = "warehouse-name" })

            </label>
            @Html.ActionLink("Manage Warehouse", "Index", "Warehouses", routeValues: new { warehouseId = Model.Warehouse.Id }, htmlAttributes: new { @class = "btn-default btn-small" })

            @* <a href="#" class="btn-default btn-small">Manage Warehouse</a> *@
        </div>
        <h3>
            @Html.DisplayTextFor(m => m.Warehouse.Name)
        </h3>

    </header>
    <div class="dashboard-summary-container">
        <div class="dashboard-summary-element">
            <div class="dashboard-summary-element-header">
                <h5>Transfers @Html.ToolTip("From Warehouse")</h5>
                <div class="dashboard-summary-icon">&#128470;</div>
            </div>
            <div class="dashboard-summary-value">
                @Html.DisplayTextFor(m => m.Warehouse.TransfersFromWarehouse.Count)
            </div>

        </div>
        <div class="dashboard-summary-element">
            <div class="dashboard-summary-element-header">
                <h5>Shipments</h5>
                <div class="dashboard-summary-icon">&#128470;</div>
            </div>
            <div class="dashboard-summary-value">
                @Html.DisplayTextFor(m => m.Warehouse.Shipments.Count)
            </div>

        </div>
        <div class="dashboard-summary-long-element">
            <div class="dashboard-summary-element-header">
                <h5>Operators and Managers</h5>
                <div class="dashboard-summary-icon">&#128470;</div>
            </div>
            <div class="dashboard-summary-value">
                @Html.DisplayTextFor(m => m.Warehouse.Operators.Count)
            </div>
            <div class="dashboard-summary-graph-container">
                <canvas id="operatorsChart" width="5" height="5"></canvas>
            </div>


        </div>
        <div class="dashboard-summary-long-element">
            <div class="dashboard-summary-element-header">
                <h5>Current Capacity @Html.ToolTip("In Units (1 Unit = 1 m3)")</h5>
                <div class="dashboard-summary-icon">&#128470;</div>
            </div>
            <div class="dashboard-summary-value">
                @Html.DisplayTextFor(m => m.Warehouse.CurrentCapacity)/@Html.DisplayTextFor(m => m.Warehouse.MaxCapacity)
            </div>
            <div class="dashboard-summary-graph-container">
                <canvas id="capacityChart" width="5" height="5"></canvas>

            </div>


        </div>
        <div class="dashboard-summary-element">
            <div class="dashboard-summary-element-header">
                <h5>Total Capacity</h5>
                <div class="dashboard-summary-icon">&#128470;</div>
            </div>
            <div class="dashboard-summary-value">
                @Html.DisplayTextFor(m => m.Warehouse.MaxCapacity)
            </div>

        </div>
        <div class="dashboard-summary-element">
            <div class="dashboard-summary-element-header">
                <h5>Warehouse Value @Html.ToolTip("$ (In Dollars)")</h5>
                <div class="dashboard-summary-icon">&#128470;</div>
            </div>
            <div class="dashboard-summary-value">
                @Model.Warehouse.GetWarehouseValue()
            </div>
        </div>
    </div>
    <div class="dashboard-analytics-container">
        <div class="storage-info-container  ">
            <h3>Storage Info</h3>
            <canvas id="storageInfoChart"></canvas>
        </div>
        <div class="notifications-container">
            <h3>
                Notification Center
            </h3>
            @if (Model.Warehouse.IsWarehouseOnLowStock())
            {
                <p>
                    Low Warehouse Stock!
                </p>
            }
            else
            {
                <p>
                    No New Notifications
                </p>
            }

        </div>
        <div class="transfer-history-container">
            <div class="transfer-history-header">
                <h3>Transfers History</h3>
                <a href="#" class="btn-small btn-default">Manage Transfers</a>
            </div>
            <div class="transfer-history-wrapper">
                <div class="transfer-history-table-header">
                    <div class="colapse-column">ID</div>
                    <div>To</div>
                    <div class="expand-column">Made On</div>
                    <div class="expand-column">Closed On</div>
                    <div class="colapse-column">Options</div>
                </div>

                <div class="transfer-history-items">
                    @if (transfers.Count == 0)
                    {
                        <div class="transfer-history-item">
                            <div>There are no transfers from this warehouse</div>

                        </div>
                    }
                    else
                    {
                        for (var i = 0; i < Math.Min(3, Model.Warehouse.TransfersFromWarehouse.Count); i++)
                        {
                            <div class="transfer-history-item">
                                <div class="colapse-column">@transfers[i].Id</div>
                                <div>@transfers[i].ToWarehouse.Name</div>
                                <div class="expand-column">@transfers[i].MadeOn.ToString("d")</div>
                                @if (transfers[i].Status == TransferStatus.StillPending)
                                {
                                    <div class="expand-column">
                                        @EnumHandler.GetDisplayName(transfers[i].Status)
                                    </div>
                                }
                                else
                                {
                                    if (transfers[i].Status == TransferStatus.Rejected)
                                    {
                                        <div class="expand-column">@transfers[i].ClosedOn.Value.ToString("d") @Html.ToolTip(transfers[i].TransferStatusString, tooltipIcon: "\u274e")</div>
                                    }
                                    else if (transfers[i].Status == TransferStatus.WarehouseDoesNotExistAnymore)
                                    {
                                        <div class="expand-column">@transfers[i].ClosedOn.Value.ToString("d") @Html.ToolTip(EnumHandler.GetDisplayName(transfers[i].Status), tooltipIcon: "\u26d4")</div>

                                    }
                                    else
                                    {
                                        <div class="expand-column">@transfers[i].ClosedOn.Value.ToString("d") @Html.ToolTip(transfers[i].TransferStatusString, tooltipIcon: "\u2705")</div>
                                    }
                                }
                                <div class="colapse-column entries-table-options">
                                    @Html.ActionLink("Details", "DetailsTransferHistory", "Transfers", routeValues: new { transferId = transfers[i].Id }, htmlAttributes: new { @class = "btn-default btn-small shade2-background" })

                                </div>
                            </div>
                        }
                    }


                </div>
            </div>

        </div>

    </div>
</div>

@section scripts
{
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>

        const warehousesList = document.getElementById('warehouse-name');

        warehousesList.addEventListener('change',
            () => {
                const url = '@Url.Action("Dashboard", "Home")' + '?warehouseId=' + warehousesList.value;
                window.location.href = url;
            });


        var ctx = document.getElementById('storageInfoChart').getContext('2d');
        var storageChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ['Wood', 'Metal', 'Electronics', 'Building Material', 'Food'],
                datasets: [{
                    label: 'Items',
                    data: [@Model.Warehouse.GetNumItemOfType(ItemType.Wood),
                        @Model.Warehouse.GetNumItemOfType(ItemType.Metal),
                        @Model.Warehouse.GetNumItemOfType(ItemType.Electronics),
                        @Model.Warehouse.GetNumItemOfType(ItemType.BuildingMaterial),
                        @Model.Warehouse.GetNumItemOfType(ItemType.Food)],
                    backgroundColor: '#502956',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 0,
                    borderRadius: 5,
                    color: '#fff'
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'bottom',  
                        labels: {
                            color: '#fff' 
                        }
                    }
                }

            }
        });


        // Operators and Managers Pie Chart
        var ctxOperators = document.getElementById('operatorsChart').getContext('2d');
        var operatorsChart = new Chart(ctxOperators, {
            type: 'pie',
            data: {
                labels: ['Operators', 'Managers'],
                datasets: [{
                    data: [@Model.Warehouse.Operators.Count - @Model.Warehouse.Managers.Count, @Model.Warehouse.Managers.Count],
                    backgroundColor: ['#502956', '#a4d4ce'],
                    borderWidth: 0
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'bottom',
                        labels: {
                            color: '#fff'
                        }
                    }
                }
            }
        });


        // Current Capacity Pie Chart
        var ctxCapacity = document.getElementById('capacityChart').getContext('2d');
        var capacityChart = new Chart(ctxCapacity, {
            type: 'pie',
            data: {
                labels: ['Free', 'Occupied'],
                datasets: [{
                    data: [@Model.Warehouse.MaxCapacity - @Model.Warehouse.CurrentCapacity, @Model.Warehouse.CurrentCapacity],
                    backgroundColor: ['#502956', '#a4d4ce'],
                    borderWidth: 0

                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'bottom',
                        labels: {
                            color: '#fff'
                        }
                    }
                }
            }
        });
    </script>
}